//
// Configuration file for the program training recog
//

config:
{

  path_dataset:
  {
    // path to the file which contains the list of categories, cf example below. It is used for knowing the category result corresponding to the predicted label
    path_to_dataset_categories = "dataset_categories.txt" 
  }


   descriptor:
  {
  //Parameters for descriptors computation for the binary compute_views_descriptor_cloud_main and compute_descriptors_RGBD_dataset_main
  //Otherwise if we use the binary ./train_similarity search, all the descriptors are computed for the rendering
    enable_esf = true;  // ESF feature descriptor
    enable_vfh = true;  // VFH feature descriptor
    enable_cvfh = true;  // CVFH feature descriptor
    enable_ourcvfh = true;  // OURCVFH feature descriptor

  };

 similaritySearch:
  {   
   build_tree = true; // If we want to build the tree index for similarity search
   descriptor = "esf"; //  change descriptor for building tree. Available : esf, vfh, cvfh, ourcvfh. Per default : esf
   enable_resolution = true; //If we want to compute the resolution and add resolution invariance to point cloud

 //Parameters for rendering during the training phase (if we want to generate multiple views of objects) from ply file.
 //Parameters if we want to use ./compute_views_descriptor_cloud_main script
    rendering:
    {
      enable_rendering = true; //If we want to compute multiple view of the objects
      xres = 250; // the size of the window (X) used to render the partial view of the object
      yres = 250; // the size of the window (Y) used to render the partial view of the object
      view_angle = 60; //  field of view of the virtual camera
      tesselation_level = 0.0; //represents the number of subdivisions applied to the triangles of original icosahedron
      save_view = true; //Save each view generated 
      save_binary = true; // Save file binary format. Otherwise it's ASCII
    };
  };

  //Parameters for filtering
  filter:
  {
    leaf_resolution = 0.01; //// For cloud resolution invariance, 0.01 for svm ans 0.001 similarit
  }

  
  //Parameters for classification part
  classification:
  {

    enable_svm = true; // Enable SVM 
    
    scaling:
    {
    	//Scaling Training data
    	scale_data = true; // Scale training and testing data
    	lower_limit = -1.0; // lower range for the scaling
    	upper_limit = 1.0; //upper range for the scaling
    	path_to_rangeFile = "./svm/"; // Path where there is the range file for scaling 
      path_to_scale_program = "./svm-scale" //Path to the program wich allows to scale file for svm
    };
    
    svm:
    {
      c = 1.0;
      eps = 1e-3;
      gamma = 0.0078125;        // Learning parameter    
    };
    
  }; 

};
